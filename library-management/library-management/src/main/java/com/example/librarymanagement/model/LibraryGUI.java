import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.awt.*;import java.util.List;import java.util.Locale;public class LibraryGUI extends JFrame {    private final Library library;    private final DefaultTableModel tableModel;    private final JTable bookTable;    private final JLabel userLabel;    private User currentUser;    public LibraryGUI() {        library = new Library();        setTitle("Library Management System");        setSize(600, 400);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        setLocationRelativeTo(null);        setLayout(new BorderLayout());        String[] columnNames = {"Title", "Author", "ISBN", "Available"};        tableModel = new DefaultTableModel(columnNames, 0);        bookTable = new JTable(tableModel);        JScrollPane scrollPane = new JScrollPane(bookTable);        add(scrollPane, BorderLayout.CENTER);        userLabel = new JLabel("Welcome, Guest");        add(userLabel, BorderLayout.NORTH);        JPanel buttonPanel = new JPanel();        JButton addBookButton = new JButton("Add Book");        addBookButton.addActionListener(e -> showAddBookDialog());        JButton deleteBookButton = new JButton("Delete Book");        deleteBookButton.addActionListener(e -> deleteBook());        JButton borrowBookButton = new JButton("Borrow Book");        borrowBookButton.addActionListener(e -> borrowBook());        JButton returnBookButton = new JButton("Return Book");        returnBookButton.addActionListener(e -> returnBook());        JButton registerButton = new JButton("Register");        registerButton.addActionListener(e -> createRegisterUI());        JButton loginButton = new JButton("Login");        loginButton.addActionListener(e -> loginUser());        JButton logoutButton = new JButton("Logout");        logoutButton.addActionListener(e -> logoutUser());        buttonPanel.add(addBookButton);        buttonPanel.add(deleteBookButton);        buttonPanel.add(borrowBookButton);        buttonPanel.add(returnBookButton);        buttonPanel.add(registerButton);        buttonPanel.add(loginButton);        buttonPanel.add(logoutButton);        add(buttonPanel, BorderLayout.SOUTH);        setVisible(true);        updateTable();    }    public static void main(String[] args) {        // 設置默認區域為英文，防止出現繁體中文資源包錯誤        Locale.setDefault(new Locale("en", "US"));        // 創建並運行 LibraryGUI        SwingUtilities.invokeLater(LibraryGUI::new);    }    private boolean isValidIsbn(String isbn) {        // 簡單地驗證 ISBN 格式        return isbn != null && isbn.matches("\\d{13}"); // 例如，13 位數字    }    private void showAddBookDialog() {        JDialog addBookDialog = new JDialog(this, "Add Book", true);        addBookDialog.setSize(300, 200);        addBookDialog.setLayout(new GridLayout(4, 2));        JTextField titleField = new JTextField();        JTextField authorField = new JTextField();        JTextField isbnField = new JTextField();        addBookDialog.add(new JLabel("Title:"));        addBookDialog.add(titleField);        addBookDialog.add(new JLabel("Author:"));        addBookDialog.add(authorField);        addBookDialog.add(new JLabel("ISBN:"));        addBookDialog.add(isbnField);        JButton addButton = new JButton("Add");        addBookDialog.add(new JLabel()); // 空占位符        addBookDialog.add(addButton);        addButton.addActionListener(e -> {            String title = titleField.getText();            String author = authorField.getText();            String isbn = isbnField.getText();            if (!isValidIsbn(isbn)) {                JOptionPane.showMessageDialog(addBookDialog, "Invalid ISBN format.");                return;            }            Book newBook = new Book(title, author, isbn);            library.addBook(newBook);            updateTable();            JOptionPane.showMessageDialog(addBookDialog, "Book added successfully!");            addBookDialog.dispose();        });        addBookDialog.setVisible(true);    }    private void deleteBook() {        int selectedRow = bookTable.getSelectedRow();        if (selectedRow != -1) {            String isbn = (String) tableModel.getValueAt(selectedRow, 2);            library.removeBook(isbn);            updateTable();            JOptionPane.showMessageDialog(this, "Book deleted.");        } else {            JOptionPane.showMessageDialog(this, "Please select a book to delete.");        }    }    private void borrowBook() {        if (currentUser != null) {            int selectedRow = bookTable.getSelectedRow();            if (selectedRow != -1) {                String isbn = (String) tableModel.getValueAt(selectedRow, 2);                if (library.borrowBook(isbn, currentUser)) {                    updateTable();                } else {                    JOptionPane.showMessageDialog(this, "Book is not available.");                }            } else {                JOptionPane.showMessageDialog(this, "Please select a book to borrow.");            }        } else {            JOptionPane.showMessageDialog(this, "Please log in first.");        }    }    private void returnBook() {        if (currentUser != null) {            int selectedRow = bookTable.getSelectedRow();            if (selectedRow != -1) {                String isbn = (String) tableModel.getValueAt(selectedRow, 2);                if (library.returnBook(isbn, currentUser)) {                    updateTable();                } else {                    JOptionPane.showMessageDialog(this, "You do not have this book.");                }            } else {                JOptionPane.showMessageDialog(this, "Please select a book to return.");            }        } else {            JOptionPane.showMessageDialog(this, "Please log in first.");        }    }    private void loginUser() {        if (currentUser == null) {            String username = JOptionPane.showInputDialog("Enter username:");            String password = JOptionPane.showInputDialog("Enter password:");            if (library.loginUser(username, password)) {                currentUser = library.getUserByUsername(username);                userLabel.setText("Welcome, " + currentUser.getUserName());                JOptionPane.showMessageDialog(this, "Login successful!");            } else {                JOptionPane.showMessageDialog(this, "Login failed.");            }        } else {            JOptionPane.showMessageDialog(this, "You are already logged in.");        }    }    private void logoutUser() {        currentUser = null;        userLabel.setText("Welcome, Guest");        JOptionPane.showMessageDialog(this, "Logged out successfully.");    }    private void createRegisterUI() {        JDialog registerDialog = new JDialog(this, "Register", true);        registerDialog.setSize(300, 200);        registerDialog.setLayout(new GridLayout(3, 2));        JTextField usernameField = new JTextField();        JTextField passwordField = new JTextField();        registerDialog.add(new JLabel("Username:"));        registerDialog.add(usernameField);        registerDialog.add(new JLabel("Password:"));        registerDialog.add(passwordField);        JButton registerButton = new JButton("Register");        registerDialog.add(registerButton);        registerButton.addActionListener(e -> {            String username = usernameField.getText();            String password = passwordField.getText();            if (library.registerUser(username, password)) {                JOptionPane.showMessageDialog(registerDialog, "Registration successful!");                registerDialog.dispose();            } else {                JOptionPane.showMessageDialog(registerDialog, "Username already exists.");            }        });        registerDialog.setVisible(true);    }    private void updateTable() {        tableModel.setRowCount(0);        List<Book> books = library.getBooks();        for (Book book : books) {            Object[] row = {                    book.getTitle(),                    book.getAuthor(),                    book.getIsbn(),                    book.isAvailable() ? "Yes" : "No"            };            tableModel.addRow(row);        }    }}